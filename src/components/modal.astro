---
const { id, label } = Astro.props;
const buttonId = id + "-open";
const buttonClose = id + "-close";

const posts = await Astro.glob('/src/content/docs/glossary/*.md');

const filtered = posts.find(post => post.file.includes(id));
---

<!-- Store the message prop as a data attribute. -->
<astro-greet data-id={id} data-button-id={buttonId}  data-button-close={buttonClose}>
<a id={buttonId}>{label}</a>

<dialog class="toolTipDialog" id={id}>
    <div class="dialog-content">
  <article>
    <p set:html={filtered.compiledContent()}></p>
  </article>
    </div>
    <div class="dialog-button">
        <button class="dialog-button-close" id={buttonClose} type="reset">Cancel</button>
    </div>
</dialog>

</astro-greet>

<script>
  class AstroGreet extends HTMLElement {
    constructor() {
      super();
        const id = this.dataset.id;
        const buttonId = this.dataset.buttonId;
        const buttonClose = this.dataset.buttonClose;

        console.log(id, buttonId, buttonClose);

        const openDialog = document.getElementById(buttonId);
        const closeDialog = document.getElementById(buttonClose);
        const dialog = document.getElementById(id);

        function clickOutside(dialog) {
        // When the user clicks anywhere outside of the dialog, close it
        window.onclick = function(event) {
            if (event.target == dialog) {
            dialog.close();
            }
        }
        }

        // Update button opens a modal dialog
        openDialog.addEventListener("click", () => {
            dialog.showModal();
            clickOutside(dialog);
        });

        // Form cancel button closes the dialog box
        closeDialog.addEventListener("click", () => {
            dialog.close();
            clickOutside(dialog);
        });
    }
  }
customElements.define('astro-greet', AstroGreet);
</script>